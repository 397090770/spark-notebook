{
  "metadata" : {
    "name" : "Geek",
    "user_save_timestamp" : "1970-01-01T01:00:00.000Z",
    "auto_save_timestamp" : "1970-01-01T01:00:00.000Z",
    "language_info" : "scala",
    "trusted" : true
  },
  "cells" : [ {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "<style>\n  h1, h2, h3, h4, h5, p, ul, li {\n    color: #2C475C;\n  }\n  .output_html {\n    color: skyblue;\n  }\n  hr { height: 2px; color: lightblue; }\n</style>"
  }, {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "# Spark 101"
  }, {
    "metadata" : {
      "trusted" : true,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "import org.apache.spark._\nimport org.apache.spark.SparkContext._\nimport org.apache.spark.rdd._",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "import org.apache.spark._\nimport org.apache.spark.SparkContext._\nimport org.apache.spark.rdd._\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 1
    } ]
  }, {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "### First create a dataset using the local `syslog` file"
  }, {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "We will \n\n*  load the file\n*  convert each line keeping its size\n*  remove the duplicates"
  }, {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "For that, we'll use the `sparkContext`, which\n\n* is the driver\n* can define job (read inputs, transform, group, etc)\n* constructs DAG\n* schedules tasks on the cluster"
  }, {
    "metadata" : {
      "trusted" : true,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "val dta:RDD[Int] = sparkContext.textFile(\"/var/log/syslog\")\n                               .map(_.size)\n                               .distinct",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "dta: org.apache.spark.rdd.RDD[Int] = MappedRDD[5] at distinct at <console>:37\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "MappedRDD[5] at distinct at &lt;console&gt;:37"
      },
      "output_type" : "execute_result",
      "execution_count" : 2
    } ]
  }, {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "**MappedRDD** is actually an instance of `RDD[Int]` that will contain the distinct sizes of the lines."
  }, {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "_Note_: there is NO computations happening! → [see UI](http://localhost:4040/stages/)"
  }, {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "-----"
  }, {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "### Now we can use the size for fancy operations like grouping per last digit"
  }, {
    "metadata" : {
      "trusted" : true,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "val rdd1:RDD[(Int, Iterable[Int])] = dta.groupBy(_ % 10)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "rdd1: org.apache.spark.rdd.RDD[(Int, Iterable[Int])] = ShuffledRDD[7] at groupBy at <console>:37\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "ShuffledRDD[7] at groupBy at &lt;console&gt;:37"
      },
      "output_type" : "execute_result",
      "execution_count" : 3
    } ]
  }, {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "### But we can also get rid of even sizes (... non trivially...), then _tupling_ with some other computations"
  }, {
    "metadata" : {
      "trusted" : true,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "val rdd2 = dta.map(_ + 1)\n              .filter(_ % 2 == 0)\n              .map(x => (x%10, x*x))",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "rdd2: org.apache.spark.rdd.RDD[(Int, Int)] = MappedRDD[10] at map at <console>:39\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "MappedRDD[10] at map at &lt;console&gt;:39"
      },
      "output_type" : "execute_result",
      "execution_count" : 4
    } ]
  }, {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "-----"
  }, {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "### We can combine distributed datasets into single ones, by _joining_ them for instance."
  }, {
    "metadata" : {
      "trusted" : true,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "val joined = rdd1.join(rdd2)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "joined: org.apache.spark.rdd.RDD[(Int, (Iterable[Int], Int))] = FlatMappedValuesRDD[13] at join at <console>:41\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "FlatMappedValuesRDD[13] at join at &lt;console&gt;:41"
      },
      "output_type" : "execute_result",
      "execution_count" : 5
    } ]
  }, {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "_Note (again)_: still nothing done on the cluster up to here → [see ui](http://localhost:4040/stages/)"
  }, {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "-----"
  }, {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "#### Now we ask the cluster to do the whole thing: Action"
  }, {
    "metadata" : {
      "trusted" : true,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "joined.take(10).toList.mkString(\"\\n\")",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "res1: String = \n(4,(CompactBuffer(124, 154, 74),5476))\n(4,(CompactBuffer(124, 154, 74),17956))\n(4,(CompactBuffer(124, 154, 74),7056))\n(4,(CompactBuffer(124, 154, 74),15376))\n(4,(CompactBuffer(124, 154, 74),10816))\n(0,(CompactBuffer(130, 110, 70),6400))\n(0,(CompactBuffer(130, 110, 70),8100))\n(0,(CompactBuffer(130, 110, 70),4900))\n(0,(CompactBuffer(130, 110, 70),12100))\n(0,(CompactBuffer(130, 110, 70),10000))\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "(4,(CompactBuffer(124, 154, 74),5476))\n(4,(CompactBuffer(124, 154, 74),17956))\n(4,(CompactBuffer(124, 154, 74),7056))\n(4,(CompactBuffer(124, 154, 74),15376))\n(4,(CompactBuffer(124, 154, 74),10816))\n(0,(CompactBuffer(130, 110, 70),6400))\n(0,(CompactBuffer(130, 110, 70),8100))\n(0,(CompactBuffer(130, 110, 70),4900))\n(0,(CompactBuffer(130, 110, 70),12100))\n(0,(CompactBuffer(130, 110, 70),10000))"
      },
      "output_type" : "execute_result",
      "execution_count" : 6
    } ]
  }, {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "_Note (yeah)_: NOW there were some computations in the cluster → [see stages](http://localhost:4040/stages/) and [see tasks](http://localhost:4040/stages/stage/?id=3&attempt=0)"
  }, {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "-----"
  }, {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "## But what just happened?"
  }, {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "### First Spark created a DAG based on the job definition"
  }, {
    "metadata" : {
      "trusted" : true,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "joined.toDebugString",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "res2: String = \n(2) FlatMappedValuesRDD[13] at join at <console>:41 []\n |  MappedValuesRDD[12] at join at <console>:41 []\n |  CoGroupedRDD[11] at join at <console>:41 []\n |  ShuffledRDD[7] at groupBy at <console>:37 []\n +-(2) MappedRDD[6] at groupBy at <console>:37 []\n    |  MappedRDD[5] at distinct at <console>:37 []\n    |  ShuffledRDD[4] at distinct at <console>:37 []\n    +-(2) MappedRDD[3] at distinct at <console>:37 []\n       |  MappedRDD[2] at map at <console>:36 []\n       |  /var/log/syslog MappedRDD[1] at textFile at <console>:35 []\n       |  /var/log/syslog HadoopRDD[0] at textFile at <console>:35 []\n +-(2) MappedRDD[10] at map at <console>:39 []\n    |  FilteredRDD[9] at filter at <console>:38 []\n    |  MappedRDD[8] at map at <console>:37 []\n    |  MappedRDD[5] at distinct at <c..."
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "(2) FlatMappedValuesRDD[13] at join at &lt;console&gt;:41 []\n |  MappedValuesRDD[12] at join at &lt;console&gt;:41 []\n |  CoGroupedRDD[11] at join at &lt;console&gt;:41 []\n |  ShuffledRDD[7] at groupBy at &lt;console&gt;:37 []\n +-(2) MappedRDD[6] at groupBy at &lt;console&gt;:37 []\n    |  MappedRDD[5] at distinct at &lt;console&gt;:37 []\n    |  ShuffledRDD[4] at distinct at &lt;console&gt;:37 []\n    +-(2) MappedRDD[3] at distinct at &lt;console&gt;:37 []\n       |  MappedRDD[2] at map at &lt;console&gt;:36 []\n       |  /var/log/syslog MappedRDD[1] at textFile at &lt;console&gt;:35 []\n       |  /var/log/syslog HadoopRDD[0] at textFile at &lt;console&gt;:35 []\n +-(2) MappedRDD[10] at map at &lt;console&gt;:39 []\n    |  FilteredRDD[9] at filter at &lt;console&gt;:38 []\n    |  MappedRDD[8] at map at &lt;console&gt;:37 []\n    |  MappedRDD[5] at distinct at &lt;console&gt;:37 []\n    |  ShuffledRDD[4] at distinct at &lt;console&gt;:37 []\n    +-(2) MappedRDD[3] at distinct at &lt;console&gt;:37 []\n       |  MappedRDD[2] at map at &lt;console&gt;:36 []\n       |  /var/log/syslog MappedRDD[1] at textFile at &lt;console&gt;:35 []\n       |  /var/log/syslog HadoopRDD[0] at textFile at &lt;console&gt;:35 []"
      },
      "output_type" : "execute_result",
      "execution_count" : 7
    } ]
  }, {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "### Then it scheduled it to the executors in the cluster <small>only one when running in local mode<small>"
  }, {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "We can check the <strong>Total tasks</strong> activity in the [UI](http://localhost:4040/executors/)"
  }, {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "-------"
  }, {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "## Now we will prepare the dataset and then using it several times"
  }, {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "So we'll read a file about stock price per day, so let's create a type holding relevant data."
  }, {
    "metadata" : {
      "trusted" : true,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "case class Line(stock:String, date:String, price:Double) extends java.io.Serializable",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "defined class Line\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 8
    } ]
  }, {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "The file will contain lines like:\n``` \nASTE,2011-12-06,33.93\nASTE,2012-03-14,36.84\n```"
  }, {
    "metadata" : {
      "trusted" : true,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : ":sh du -h /home/noootsab/data/closes.csv",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "warning: there were 1 feature warning(s); re-run with -feature for details\nimport sys.process._\nres3: scala.xml.Elem = \n<pre>174M\t/home/noootsab/data/closes.csv\n</pre>\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "<pre>174M\t/home/noootsab/data/closes.csv\n</pre>"
      },
      "output_type" : "execute_result",
      "execution_count" : 9
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "val closes:RDD[Line] = sparkContext.textFile(\"/home/noootsab/data/closes.csv\")\n                                   .map(_.split(\",\").toList)\n                                   .map{ case s::d::p::Nil => Line(s, d, p.toDouble)}",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "<console>:42: warning: match may not be exhaustive.\nIt would fail on the following input: List(_, _, _, _)\n                                          .map{ case s::d::p::Nil => Line(s, d, p.toDouble)}\n                                              ^\ncloses: org.apache.spark.rdd.RDD[Line] = MappedRDD[17] at map at <console>:42\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "MappedRDD[17] at map at &lt;console&gt;:42"
      },
      "output_type" : "execute_result",
      "execution_count" : 10
    } ]
  }, {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "We have date, so we can group stock prices per day"
  }, {
    "metadata" : {
      "trusted" : true,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "val byDate = closes.keyBy(_.date)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "byDate: org.apache.spark.rdd.RDD[(String, Line)] = MappedRDD[18] at keyBy at <console>:42\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "MappedRDD[18] at keyBy at &lt;console&gt;:42"
      },
      "output_type" : "execute_result",
      "execution_count" : 11
    } ]
  }, {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "Now we can compute the minimum stocks per date"
  }, {
    "metadata" : {
      "trusted" : true,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "def minByDate = byDate.combineByKey[(String, Double)](                                                                                           // `def` to force spark recomputing... otherwise it's smart enough to reuse previous RDDs...\n  (x:Line) => (x.stock, x.price), \n  (d:(String, Double), l:Line) => if (d._2 < l.price) d else (l.stock, l.price),\n  (d1:(String, Double), d2:(String, Double)) => if (d1._2 < d2._2) d1 else d2\n)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "minByDate: org.apache.spark.rdd.RDD[(String, (String, Double))]\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "ShuffledRDD[19] at combineByKey at &lt;console&gt;:44"
      },
      "output_type" : "execute_result",
      "execution_count" : 12
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "<pre>{minByDate.take(2).toList.mkString(\"\\n\")}</pre>",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "res4: scala.xml.Elem = \n<pre>(2012-10-17,(FRCN,0.0))\n(2012-04-05,(FULO,0.0))</pre>\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "<pre>(2012-10-17,(FRCN,0.0))\n(2012-04-05,(FULO,0.0))</pre>"
      },
      "output_type" : "execute_result",
      "execution_count" : 14
    } ]
  }, {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "It took ~2 seconds (in local[8] and 24G of RAM)"
  }, {
    "metadata" : {
      "trusted" : true,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "<pre>{minByDate.take(2).toList.mkString(\"\\n\")}</pre>",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "res5: scala.xml.Elem = \n<pre>(2012-10-17,(FRCN,0.0))\n(2012-04-05,(FULO,0.0))</pre>\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "<pre>(2012-10-17,(FRCN,0.0))\n(2012-04-05,(FULO,0.0))</pre>"
      },
      "output_type" : "execute_result",
      "execution_count" : 15
    } ]
  }, {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "Once again.... 2 seconds!!!"
  }, {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "#### Solution: caching!"
  }, {
    "metadata" : {
      "trusted" : true,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "val maxByDate2 = byDate.combineByKey[(String, Double)](\n  (x:Line) => (x.stock, x.price), \n  (d:(String, Double), l:Line) => if (d._2 > l.price) d else (l.stock, l.price),\n  (d1:(String, Double), d2:(String, Double)) => if (d1._2 > d2._2) d1 else d2\n)\n\nmaxByDate2.cache()                                                                                                               // okay.... not really needed since Spark is smart enough in this case -_-\"",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "maxByDate2: org.apache.spark.rdd.RDD[(String, (String, Double))] = ShuffledRDD[22] at combineByKey at <console>:44\nres6: maxByDate2.type = ShuffledRDD[22] at combineByKey at <console>:44\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "ShuffledRDD[22] at combineByKey at &lt;console&gt;:44"
      },
      "output_type" : "execute_result",
      "execution_count" : 16
    } ]
  }, {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "Ask some data"
  }, {
    "metadata" : {
      "trusted" : true,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "<pre>{maxByDate2.take(2).toList.mkString(\"\\n\")}</pre>",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "res7: scala.xml.Elem = \n<pre>(2012-10-17,(INLC,4000000.0))\n(2012-04-05,(INOLD,1.0E8))</pre>\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "<pre>(2012-10-17,(INLC,4000000.0))\n(2012-04-05,(INOLD,1.0E8))</pre>"
      },
      "output_type" : "execute_result",
      "execution_count" : 17
    } ]
  }, {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "**Go to [UI](http://localhost:4040/storage/)**"
  }, {
    "metadata" : {
      "trusted" : true,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "<pre>{maxByDate2.take(2).toList.mkString(\"\\n\")}</pre>",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "res8: scala.xml.Elem = \n<pre>(2012-10-17,(INLC,4000000.0))\n(2012-04-05,(INOLD,1.0E8))</pre>\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "<pre>(2012-10-17,(INLC,4000000.0))\n(2012-04-05,(INOLD,1.0E8))</pre>"
      },
      "output_type" : "execute_result",
      "execution_count" : 18
    } ]
  }, {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "**BLAZING FAST** => Reuses the cache!"
  } ],
  "nbformat" : 4
}